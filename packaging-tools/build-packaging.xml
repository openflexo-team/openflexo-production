<project name="packaging-tools" basedir="."
	xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />

	<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
		uri="antlib:org.apache.maven.artifact.ant" />

	  <macrodef name="maven">
	    <attribute name="options" default="" />
	    <attribute name="goal" />
	    <attribute name="basedir" />
	    <attribute name="resultproperty" default="maven.result" />
	    <element name="args" implicit="true" optional="true" />
	    <sequential>
	      <java classname="org.codehaus.classworlds.Launcher" fork="true"
		    dir="@{basedir}" resultproperty="@{resultproperty}">
		<jvmarg value="-Xmx512m"/>
		<classpath>
		  <fileset dir="${maven.home}/boot">
		    <include name="*.jar" />
		  </fileset>
		  <fileset dir="${maven.home}/lib">
		    <include name="*.jar" />
		  </fileset>
		</classpath>
		<sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
		<sysproperty key="maven.home" value="${maven.home}" />
		<sysproperty key="maven.repo.local" value="${maven.repo.local}" />
		<sysproperty key="maven.multiModuleProjectDirectory" value="false" />
		<arg line="--batch-mode @{options} @{goal}" />
	      </java>
	    </sequential>
	  </macrodef>


	<target name="defineProperties">
		<property environment="env" />
		<!-- Remove '-' if any : -SNAPSHOT or -beta will still be identified -->
		<propertyregex property="flexo_version" input="${project.version}"
			regexp="(-*)" replace="" />
		<!-- Set a 3 digit version in normalized_version -->
		<propertyregex property="normalized_version" input="${flexo_version}"
			regexp="([0-9]+)\.([0-9]+)\.([0-9]+)" select="\0" defaultvalue="${flexo_version}.0" />
		<propertyregex property="withoutRC_version" input="${normalized_version}"
			regexp="(RC[0-9]*)" replace=""  defaultvalue="${normalized_version}" />
		<propertyregex property="digitized_version" input="${withoutRC_version}"
			regexp="([A-Z]*)" replace=""  defaultvalue="${withoutRC_version}" />
		<!-- Set a 4 digit version in 4d_version -->
		<propertyregex property="4d_version" input="${digitized_version}"
			regexp="([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)" select="\0" defaultvalue="${digitized_version}.0" />
		<!-- ./target -->
		<property name="flexobuild.work.dir" value="${project.build.directory}/flexobuild" />
		<!-- ./target/flexobuild -->
		<property name="artifact.dir" value="${flexobuild.work.dir}/checkedout-artifact" />
		<!-- ./target/flexobuild/checkedout-artifact -->
		<property name="dist.dir" value="${flexobuild.work.dir}/dist" />
		<!-- ./target/flexobuild/build -->
		<property name="mac.app.dir" value="${flexobuild.work.dir}/mac_apps" />
		<tstamp>
			<format property="build.id" pattern="yyyy-MM-dd.HHmm" />
		</tstamp>
		<property name="commit.id" value="${env.GIT_COMMIT}" />
		<property name="build.properties" value="${flexobuild.work.dir}/build.properties" />
		<property name="maven.type" value="zip" />
		<property name="maven.classifier" value="packaging" />
	</target>

	<target name="deploy" depends="defineProperties">
		<property name="deploy" value="true" />
		<property name="deployment.root.folder" value="~/downloads/openflexo" />
		<property name="deployment.user.name" value="${user.name}" />
		<property name="deployment.server.name" value="downloads.openflexo.org" />
		<property name="ssh.private.keyfile" value="${user.home}/.ssh/id_rsa" />
		<property name="ssh.passphrase" value="" />
		<tstamp>
			<format property="daily_folder" pattern="yyyy-MM-dd" />
		</tstamp>
		<antcall target="copyPackagesOnServer" />
	</target>


	<target name="createPackage">
		<antcall target="cleanTempDir" />
		<property name="qualified_app_name" value="${product.name} ${productSuffix}" />
		<property name="qualified_and_versioned_app_name" value="${qualified_app_name} ${flexo_version}" />
		<property name="volume_name" value="Openflexo-${flexo_version}" />
		<!--<propertyregex property="package_name" input="${app_name} Setup" regexp="\s+" 
			replace="_" global="true"/> -->
		<property name="mac.app.dir.versioned" value="${mac.app.dir}/${versionType}" />
		<property name="package_name" value="${qualified_and_versioned_app_name} Setup" />
		<echoproperties destfile="${build.properties}" />
		<antcall target="checkoutArtifact" />
		<antcall target="generateFlexoProperties" />
		<!-- <antcall target="generateHelp" /> -->
		<!--<antcall target="packageWindows" /> -->
		<!--<antcall target="packageMacOSX" /> -->
		<antcall target="packageLinux" />
	</target>

	<target name="cleanTempDir">
		<delete dir="${flexobuild.work.dir}" failonerror="false" />
		<mkdir dir="${flexobuild.work.dir}" />
		<delete dir="${dist.dir}" failonerror="false" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="checkoutArtifact">
		<copy tofile="${flexobuild.work.dir}/pom.xml" filtering="true"
			overwrite="true">
			<resources>
				<javaresource name="pom.xml.tpl">
					<classpath>
						<pathelement location="${org.openflexo:packaging-tools:jar}"></pathelement>
					</classpath>
				</javaresource>
			</resources>
			<filterset>
				<filtersfile file="${build.properties}" />
			</filterset>
		</copy>
      		<maven basedir="${flexobuild.work.dir}"
             		options=""
             		goal="dependency:unpack"
            		resultproperty="maven.build.result"/>

		<antcall target="generateApplicationVersion" />
	</target>

	<target name="generateApplicationVersion">
		<mkdir dir="${flexobuild.work.dir}/version/src/org/openflexo" />
		<mkdir dir="${flexobuild.work.dir}/version/bin" />
		<copy
			tofile="${flexobuild.work.dir}/version/src/org/openflexo/ApplicationVersion.java"
			filtering="true" overwrite="true">
			<resources>
				<javaresource name="ApplicationVersion.java.tpl">
					<classpath>
						<pathelement location="${org.openflexo:packaging-tools:jar}"></pathelement>
					</classpath>
				</javaresource>
			</resources>
			<filterset>
				<filtersfile file="${build.properties}" />
			</filterset>
		</copy>
		<javac srcdir="${flexobuild.work.dir}/version/src" destdir="${flexobuild.work.dir}/version/bin"
			source="${compiler.source}" target="${compiler.target}" fork="true" />
		<jar destfile="${dist.dir}/lib/flexo-${project.version}.jar"
			update="true">
			<fileset dir="${flexobuild.work.dir}/version/bin">
				<include name="**/*.class" />
			</fileset>
		</jar>
	</target>

	<target name="generateFlexoProperties">
		<copy tofile="${dist.dir}/Config/Flexo.properties" filtering="true"
			overwrite="true">
			<resources>
				<javaresource name="Flexo.properties.tpl">
					<classpath>
						<pathelement location="${org.openflexo:packaging-tools:jar}"></pathelement>
					</classpath>
				</javaresource>
			</resources>
		</copy>

		<filterset>
			<filtersfile file="${build.properties}" />
		</filterset>
	</target>

	<target name="generateHelp">
		<taskdef name="generatehelp" classname="org.openflexo.ant.GenerateHelpSetTask">
			<classpath>
				<fileset dir="${dist.dir}/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<generatehelp resourceDir="${dist.dir}">
			<language isocode="ENGLISH" title="FlexoToolSet Help">
				<distribution name="${userType}" />
			</language>
			<language isocode="FRENCH" title="Aide-FlexoToolSet">
				<distribution name="${userType}" />
			</language>
		</generatehelp>
	</target>

	<target name="packageWindows">
		<antcall target="generateFlexoLauncher" />
		<antcall target="generateInstallerScript" />
		<antcall target="windowsPackaging" />
	</target>

	<target name="windowsPackaging">
		<exec executable="makensis" failonerror="true">
			<arg value="-V2" />
			<arg value="${flexobuild.work.dir}/flexoinstaller.nsi" />
		</exec>
	</target>

	<target name="generateInstallerScript">
		<copy tofile="${flexobuild.work.dir}/flexoinstaller.nsi"
			filtering="true" overwrite="true">
			<resources>
				<javaresource name="Windows/flexoinstaller.nsi.tpl">
					<classpath>
						<pathelement location="${org.openflexo:packaging-tools:jar}"></pathelement>
					</classpath>
				</javaresource>
			</resources>
			<filterset>
				<filtersfile file="${build.properties}" />
			</filterset>
		</copy>
	</target>

	<target name="generateFlexoLauncher">
		<copy tofile="${flexobuild.work.dir}/pom.xml" filtering="true"
			overwrite="true">
			<resources>
				<javaresource name="Windows/pom_launch4j.xml.tpl">
					<classpath>
						<pathelement location="${org.openflexo:packaging-tools:jar}"></pathelement>
					</classpath>
				</javaresource>
			</resources>
			<filterset>
				<filtersfile file="${build.properties}" />
			</filterset>
		</copy>
      		<maven basedir="${flexobuild.work.dir}"
             		options=""
             		goal="package"
            		resultproperty="maven.build.result"/>
	</target>

	<target name="packageMacOSX">
		<copy tofile="${flexobuild.work.dir}/JavaApplicationStub"
			filtering="false" overwrite="true">
			<resources>
				<javaresource name="MacOS/JavaApplicationStub">
					<classpath>
						<pathelement location="${org.openflexo:packaging-tools:jar}"></pathelement>
					</classpath>
				</javaresource>
			</resources>
		</copy>
		<copy tofile="${flexobuild.work.dir}/appbundler-1.0.jar"
			filtering="false" overwrite="true">
			<resources>
				<javaresource name="lib/appbundler-1.0.jar">
					<classpath>
						<pathelement location="${org.openflexo:packaging-tools:jar}"></pathelement>
					</classpath>
				</javaresource>
			</resources>
		</copy>
		<property name="java.stubfile" value="${flexobuild.work.dir}/JavaApplicationStub" />
		<chmod perm="a+x" file="${java.stubfile}" />
		<property name="relative_res_path"
			value="${qualified_and_versioned_app_name}.app/Contents/Resources" />
		<!-- jarbundler is no more compatible with Java 1.7, we use bundleapp instead -->
		<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
			classpath="${flexobuild.work.dir}/appbundler-1.0.jar" />
		<!--<taskdef name="jarbundler" classpath="lib/jarbundler-1.9.jar" classname="net.sourceforge.jarbundler.JarBundler" 
			/> -->
		<mkdir dir="${mac.app.dir.versioned}" />
		<tstamp>
			<format property="current.year" pattern="yyyy" />
		</tstamp>
		<if><equals arg1="${vm.arg0}" arg2="" /> <then><property name="vm.carg0" value="-Xmx1g" /> </then>
							<else><property name="vm.carg0" value="${vm.arg0}" /></else></if>
		<if><equals arg1="${vm.arg1}" arg2="" /> <then><property name="vm.carg1" value="${vm.carg0}" /> </then>
							<else><property name="vm.carg1" value="${vm.arg1}" /></else></if>
		<if><equals arg1="${vm.arg2}" arg2="" /> <then><property name="vm.carg2" value="${vm.carg0}" /> </then>
							<else><property name="vm.carg2" value="${vm.arg2}" /></else></if>
		<if><equals arg1="${vm.arg3}" arg2="" /> <then><property name="vm.carg3" value="${vm.carg0}" /> </then>
							<else><property name="vm.carg3" value="${vm.arg3}" /></else></if>
		<if><equals arg1="${vm.arg4}" arg2="" /> <then><property name="vm.carg4" value="${vm.carg0}" /> </then>
							<else><property name="vm.carg4" value="${vm.arg4}" /></else></if>
		<bundleapp outputdirectory="${mac.app.dir.versioned}"
			name="${qualified_and_versioned_app_name}" displayname="${product.name}"
			identifier="${product.name}" shortversion="${flexo_version}"
			applicationCategory="public.app-category.developer-tools" icon="${icons.dir}/${icon_mac_name}"
			mainclassname="${main.class}" copyright="(c) ${organization.name} ${current.year}">
			<!--<runtime dir="${env.JAVA_HOME}"/> -->
			<classpath dir="${dist.dir}">
				<include name="**/*.jar" />
			</classpath>
			<option value="-Dapple.laf.useScreenMenuBar=true" />
			<option value="-Dapple.awt.antialiasing=true" />
			<option value="-Dapple.awt.antialiasedtext=true" />
			<option value="${vm.carg0}" />
			<option value="${vm.carg1}" />
			<option value="${vm.carg2}" />
			<option value="${vm.carg3}" />
			<option value="${vm.carg4}" />
			<argument value="${program.args}" />
		</bundleapp>
		<copy todir="${mac.app.dir.versioned}/${relative_res_path}">
			<fileset dir="${dist.dir}">
				<exclude name="lib/*" />
				<exclude name="deps/*" />
				<exclude name="*.exe" />
				<exclude name="*.sh" />
			</fileset>
		</copy>
		<antcall target="osx-packaging" />
	</target>

	<target name="osx-packaging">
		<exec executable="genisoimage">
			<arg value="-D" />
			<arg value="-quiet" />
			<arg value="-V" />
			<arg value="${volume_name}" />
			<arg value="-A" />
			<arg value="${qualified_and_versioned_app_name}" />
			<arg value="-p" />
			<arg value="${organization.name}" />
			<arg value="-r" />
			<arg value="-apple" />
			<arg value="-o" />
			<arg
				value="${project.build.directory}/${qualified_and_versioned_app_name}.dmg" />
			<arg value="${mac.app.dir.versioned}" />
		</exec>
	</target>

	<target name="packageLinux">
		<property name="start.script.file" value="${dist.dir}/start.sh" />
		<copy tofile="${start.script.file}" filtering="true" overwrite="true">
			<resources>
				<javaresource name="Linux/start.sh.tpl">
					<classpath>
						<pathelement location="${org.openflexo:packaging-tools:jar}"></pathelement>
					</classpath>
				</javaresource>
			</resources>
			<filterset>
				<filtersfile file="${build.properties}" />
			</filterset>
		</copy>
		<chmod perm="755" file="${start.script.file}" />
		<antcall target="linux-packaging" />
	</target>

	<target name="linux-packaging">
		<tar
			destfile="${project.build.directory}/${product.name} ${productSuffix} ${flexo_version}.tar.gz"
			compression="gzip" longfile="gnu">
			<tarfileset mode="755" dir="${dist.dir}">
				<exclude name="*.exe" />
				<include name="*.sh" />
			</tarfileset>
			<tarfileset dir="${dist.dir}">
				<exclude name="*.exe" />
				<exclude name="*.sh" />
			</tarfileset>
		</tar>
	</target>

	<target name="copyPackagesOnServer" if="deploy">
		<!--<antcall target="copyOnServerWindowsRelease" />-->
		<!--<antcall target="copyOnServerMacRelease" /> -->
		<antcall target="copyOnServerLinuxRelease" />
		<!--<antcall target="copyOnServerWindowsNightly" />-->
		<!--<antcall target="copyOnServerMacNightly" />-->
		<antcall target="copyOnServerLinuxNightly" />
	</target>

	<target name="copyOnServerWindowsRelease" unless="isNightly">
		<property name="folder"
			value="${deployment.root.folder}/${flexo_version}/${daily_folder}/Windows" />
		<antcall target="createRemoteFolder" />
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}"
			trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}"
			failonerror="true">
			<fileset dir="${project.build.directory}">
				<include name="*.exe" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerMacRelease" unless="isNightly">
		<property name="folder"
			value="${deployment.root.folder}/${flexo_version}/${daily_folder}/Mac" />
		<antcall target="createRemoteFolder" />
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}"
			trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}"
			failonerror="true">
			<fileset dir="${project.build.directory}">
				<include name="*.dmg" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerLinuxRelease" unless="isNightly">
		<property name="folder"
			value="${deployment.root.folder}/${flexo_version}/${daily_folder}/Linux" />
		<antcall target="createRemoteFolder" />
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}"
			trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}"
			failonerror="true">
			<fileset dir="${project.build.directory}">
				<include name="*.tar.gz" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerWindowsNightly" if="isNightly">
		<property name="folder"
			value="${deployment.root.folder}/${flexo_version}/nightly/Windows" />
		<antcall target="createRemoteFolder" />
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}"
			trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}"
			failonerror="true">
			<fileset dir="${project.build.directory}">
				<include name="*.exe" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerMacNightly" if="isNightly">
		<property name="folder"
			value="${deployment.root.folder}/${flexo_version}/nightly/Mac" />
		<antcall target="createRemoteFolder" />
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}"
			trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}"
			failonerror="true">
			<fileset dir="${project.build.directory}">
				<include name="*.dmg" />
			</fileset>
		</scp>
	</target>

	<target name="copyOnServerLinuxNightly" if="isNightly">
		<property name="folder"
			value="${deployment.root.folder}/${flexo_version}/nightly/Linux" />
		<antcall target="createRemoteFolder" />
		<scp todir="${deployment.user.name}@${deployment.server.name}:${folder}"
			trust="true" keyfile="${ssh.private.keyfile}" passphrase="${ssh.passphrase}"
			failonerror="true">
			<fileset dir="${project.build.directory}">
				<include name="*.tar.gz" />
			</fileset>
		</scp>
	</target>

	<target name="createRemoteFolder">
		<sshexec command="mkdir -p ${folder}" host="${deployment.server.name}"
			username="${deployment.user.name}" trust="true" keyfile="${ssh.private.keyfile}"
			passphrase="${ssh.passphrase}" failonerror="false" />
	</target>

</project>
